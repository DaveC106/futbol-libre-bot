import telebot
from flask import Flask
import threading
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import os
import re
import time

TOKEN = os.environ.get('BOT_TOKEN')
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN no encontrado en variables de entorno")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# ========================
# PARTIDOS DIRECTAMENTE EN EL C√ìDIGO.
# ========================
PARTIDOS_JSON = {
  "partidos": [
    {
      "partido": "Eredivisie: Twente vs Ajax",
      "link": "https://futbolibretv.pages.dev/#partido-26700"
    },
    {
      "partido": "Serie A: Torino vs Genoa",
      "link": "https://futbolibretv.pages.dev/#partido-26662"
    },
    {
      "partido": "2. Bundesliga: Eintracht Braunschweig vs Hannover 96",
      "link": "https://futbolibretv.pages.dev/#partido-26695"
    },
    {
      "partido": "2. Bundesliga: Magdeburg vs Preu√üen M√ºnster",
      "link": "https://futbolibretv.pages.dev/#partido-26696"
    },
    {
      "partido": "2. Bundesliga: Kaiserslautern vs N√ºrnberg",
      "link": "https://futbolibretv.pages.dev/#partido-26694"
    },
    {
      "partido": "LaLiga SmartBank: M√°laga vs FC Andorra",
      "link": "https://futbolibretv.pages.dev/#partido-26704"
    },
    {
      "partido": "LaLiga: Mallorca vs Levante",
      "link": "https://futbolibretv.pages.dev/#partido-26658"
    },
    {
      "partido": "ATP: Jannik Sinner (ITA]vs. Alexander Zverev (GER](Final]",
      "link": "https://futbolibretv.pages.dev/#partido-26715"
    },
    {
      "partido": "Eerste Divisie: Willem II vs MVV",
      "link": "https://futbolibretv.pages.dev/#partido-26713"
    },
    {
      "partido": "Eredivisie: Feyenoord vs PSV",
      "link": "https://futbolibretv.pages.dev/#partido-26701"
    },
    {
      "partido": "Premier League: Wolverhampton Wanderers vs Burnley",
      "link": "https://futbolibretv.pages.dev/#partido-26655"
    },
    {
      "partido": "Serie A: Sassuolo vs Roma",
      "link": "https://futbolibretv.pages.dev/#partido-26663"
    },
    {
      "partido": "Premier League: AFC Bournemouth vs Nottingham Forest",
      "link": "https://futbolibretv.pages.dev/#partido-26653"
    },
    {
      "partido": "Premier League: Arsenal vs Crystal Palace",
      "link": "https://futbolibretv.pages.dev/#partido-26656"
    },
    {
      "partido": "Serie A: Hellas Verona vs Cagliari",
      "link": "https://futbolibretv.pages.dev/#partido-26664"
    },
    {
      "partido": "Super Lig: Galatasaray vs G√∂ztepe",
      "link": "https://futbolibretv.pages.dev/#partido-26708"
    },
    {
      "partido": "Premier League: Aston Villa vs Manchester City",
      "link": "https://futbolibretv.pages.dev/#partido-26654"
    },
    {
      "partido": "Ligue 1: Lille vs Metz",
      "link": "https://futbolibretv.pages.dev/#partido-26669"
    },
    {
      "partido": "Bundesliga: Bayer Leverkusen vs Freiburg",
      "link": "https://futbolibretv.pages.dev/#partido-26667"
    },
    {
      "partido": "LaLiga: Real Madrid vs Barcelona",
      "link": "https://futbolibretv.pages.dev/#partido-26659"
    },
    {
      "partido": "Primeira Liga: Famalic√£o vs Vit√≥ria Guimar√£es",
      "link": "https://futbolibretv.pages.dev/#partido-26674"
    },
    {
      "partido": "Primera Divisi√≥n: Universidad Cat√≥lica vs Universidad Chile",
      "link": "https://futbolibretv.pages.dev/#partido-26680"
    },
    {
      "partido": "Eredivisie: AZ vs Utrecht",
      "link": "https://futbolibretv.pages.dev/#partido-26702"
    },
    {
      "partido": "Liga 1: Sporting Cristal vs Los Chankas",
      "link": "https://futbolibretv.pages.dev/#partido-26649"
    },
    {
      "partido": "Ligue 1: Angers SCO vs Lorient",
      "link": "https://futbolibretv.pages.dev/#partido-26670"
    },
    {
      "partido": "Ligue 1: Rennes vs Nice",
      "link": "https://futbolibretv.pages.dev/#partido-26671"
    },
    {
      "partido": "Ligue 1: Auxerre vs Le Havre",
      "link": "https://futbolibretv.pages.dev/#partido-26672"
    },
    {
      "partido": "Premier League: Everton vs Tottenham Hotspur",
      "link": "https://futbolibretv.pages.dev/#partido-26657"
    },
    {
      "partido": "Bundesliga: Stuttgart vs Mainz 05",
      "link": "https://futbolibretv.pages.dev/#partido-26668"
    },
    {
      "partido": "Primera Divisi√≥n: Danubio vs River Plate",
      "link": "https://futbolibretv.pages.dev/#partido-26690"
    },
    {
      "partido": "Super Lig: Kasƒ±mpa≈üa vs Be≈üikta≈ü",
      "link": "https://futbolibretv.pages.dev/#partido-26709"
    },
    {
      "partido": "Serie A: Fiorentina vs Bologna",
      "link": "https://futbolibretv.pages.dev/#partido-26665"
    },
    {
      "partido": "LaLiga SmartBank: Sporting Gij√≥n vs Real Zaragoza",
      "link": "https://futbolibretv.pages.dev/#partido-26706"
    },
    {
      "partido": "LaLiga: Osasuna vs Celta de Vigo",
      "link": "https://futbolibretv.pages.dev/#partido-26660"
    },
    {
      "partido": "LaLiga SmartBank: Almer√≠a vs CD Castellon",
      "link": "https://futbolibretv.pages.dev/#partido-26705"
    },
    {
      "partido": "Serie A: Cuniburo vs T√©cnico Universitario",
      "link": "https://futbolibretv.pages.dev/#partido-26685"
    },
    {
      "partido": "Primeira Liga: Tondela vs Sporting CP",
      "link": "https://futbolibretv.pages.dev/#partido-26675"
    },
    {
      "partido": "Liga 1: UTC Cajamarca vs Alianza Universidad",
      "link": "https://futbolibretv.pages.dev/#partido-26650"
    },
    {
      "partido": "Eredivisie: Go Ahead Eagles vs Excelsior",
      "link": "https://futbolibretv.pages.dev/#partido-26703"
    },
    {
      "partido": "Copa de la Divisi√≥n Profesional: Gualberto Villarroel SJ vs Oriente Petrolero",
      "link": "https://futbolibretv.pages.dev/#partido-26710"
    },
    {
      "partido": "Brasileir√£o: Gr√™mio vs Juventude",
      "link": "https://futbolibretv.pages.dev/#partido-26676"
    },
    {
      "partido": "Primera Divisi√≥n: Cobresal vs Uni√≥n Espa√±ola",
      "link": "https://futbolibretv.pages.dev/#partido-26681"
    },
    {
      "partido": "Primera Divisi√≥n: Liverpool vs Progreso",
      "link": "https://futbolibretv.pages.dev/#partido-26691"
    },
    {
      "partido": "Brasileir√£o: Botafogo vs Santos",
      "link": "https://futbolibretv.pages.dev/#partido-26677"
    },
    {
      "partido": "Serie A: Lazio vs Juventus",
      "link": "https://futbolibretv.pages.dev/#partido-26666"
    },
    {
      "partido": "Ligue 1: Olympique Lyonnais vs Strasbourg",
      "link": "https://futbolibretv.pages.dev/#partido-26673"
    },
    {
      "partido": "LaLiga SmartBank: Deportivo La Coru√±a vs Real Valladolid",
      "link": "https://futbolibretv.pages.dev/#partido-26707"
    },
    {
      "partido": "Amistoso Internacional Femenino: EE. UU. vs Portugal",
      "link": "https://futbolibretv.pages.dev/#partido-26714"
    },
    {
      "partido": "LaLiga: Rayo Vallecano vs Deportivo Alav√©s",
      "link": "https://futbolibretv.pages.dev/#partido-26661"
    },
    {
      "partido": "Primera Divisi√≥n: Olimpia vs Guaran√≠",
      "link": "https://futbolibretv.pages.dev/#partido-26688"
    },
    {
      "partido": "Liga 1: ADT vs Universitario",
      "link": "https://futbolibretv.pages.dev/#partido-26651"
    },
    {
      "partido": "Serie A: El Nacional vs Macar√°",
      "link": "https://futbolibretv.pages.dev/#partido-26686"
    },
    {
      "partido": "Primera Divisi√≥n: O'Higgins vs Coquimbo Unido",
      "link": "https://futbolibretv.pages.dev/#partido-26683"
    },
    {
      "partido": "Copa de la Divisi√≥n Profesional: Wilstermann vs The Strongest",
      "link": "https://futbolibretv.pages.dev/#partido-26711"
    },
    {
      "partido": "Primera Divisi√≥n: Uni√≥n La Calera vs √ëublense",
      "link": "https://futbolibretv.pages.dev/#partido-26682"
    },
    {
      "partido": "Primera Divisi√≥n: Wanderers vs Nacional",
      "link": "https://futbolibretv.pages.dev/#partido-26692"
    },
    {
      "partido": "Brasileir√£o: RB Bragantino vs Vasco da Gama",
      "link": "https://futbolibretv.pages.dev/#partido-26678"
    },
    {
      "partido": "Liga MX: Santos Laguna vs Quer√©taro",
      "link": "https://futbolibretv.pages.dev/#partido-26697"
    },
    {
      "partido": "Liga 1: Melgar vs Sport Huancayo",
      "link": "https://futbolibretv.pages.dev/#partido-26652"
    },
    {
      "partido": "Primera Divisi√≥n: Deportivo Recoleta vs Libertad",
      "link": "https://futbolibretv.pages.dev/#partido-26689"
    },
    {
      "partido": "Serie A: Emelec vs Delfin",
      "link": "https://futbolibretv.pages.dev/#partido-26687"
    },
    {
      "partido": "Brasileir√£o: Palmeiras vs Cruzeiro",
      "link": "https://futbolibretv.pages.dev/#partido-26679"
    },
    {
      "partido": "Primera A: Atl√©tico Nacional vs Medell√≠n",
      "link": "https://futbolibretv.pages.dev/#partido-26684"
    },
    {
      "partido": "Copa de la Divisi√≥n Profesional: Nacional Potos√≠ vs Real Oruro",
      "link": "https://futbolibretv.pages.dev/#partido-26712"
    },
    {
      "partido": "Primera Divisi√≥n: Miramar Misiones vs Boston River",
      "link": "https://futbolibretv.pages.dev/#partido-26693"
    },
    {
      "partido": "Liga MX: Toluca vs Pachuca",
      "link": "https://futbolibretv.pages.dev/#partido-26699"
    },
    {
      "partido": "Liga MX: Atl√©tico San Luis vs Necaxa",
      "link": "https://futbolibretv.pages.dev/#partido-26698"
    }
  ]
}

def formato_limpio(partido_completo):
    match = re.search(r':\s*(.+)', partido_completo)
    if match:
        return match.group(1).strip()
    return partido_completo

def add_footer():
    return "\n\nü§î *¬øQuieres hacer algo m√°s?*\nVolver al men√∫ principal /menu"

def add_search_footer():
    return "\n\nü§î *¬øQuieres hacer algo m√°s?*\nBuscar otro partido o /menu"

@bot.message_handler(commands=['start', 'menu'])
def send_welcome(message):
    user_name = message.from_user.first_name
    welcome_text = f"""¬°Hola {user_name}! üëã

Soy *FulbiBot*, tu asistente para ver partidos gratis.

‚úÖ *Comandos disponibles:*
/partidos - Ver los partidos de hoy
/ayuda - Gu√≠a completa y soluciones

*¬øBuscas un partido espec√≠fico?* üîç
¬°Solo escribe el nombre del equipo o una palabra clave relacionada! ‚ö°

¬°Elige un comando y disfruta del f√∫tbol! üéâ"""
    bot.reply_to(message, welcome_text, parse_mode='Markdown')
    print(f"‚úÖ /{message.text[1:]} enviado a {user_name}")

@bot.message_handler(commands=['partidos'])
def send_matches(message):
    try:
        partidos = PARTIDOS_JSON["partidos"]

        if partidos:
            bloque = ""
            contador = 1
            max_chars = 3500  # Telegram tiene l√≠mite ~4096, dejar margen
            for partido in partidos:
                partido_limpio = formato_limpio(partido['partido'])
                texto = f"*{contador}. {partido_limpio}*\nüîó {partido['link']}\n\n"
                if len(bloque) + len(texto) > max_chars:
                    bot.reply_to(message, bloque, parse_mode='Markdown')
                    bloque = ""
                bloque += texto
                contador += 1

            if bloque:  # Enviar el bloque final
                bot.reply_to(message, bloque, parse_mode='Markdown')

            footer = add_footer()
            bot.reply_to(message, footer, parse_mode='Markdown')
            print("‚úÖ /partidos enviado en bloques")

        else:
            bot.reply_to(message, "‚ùå *No hay partidos disponibles en este momento.*\n\nIntenta m√°s tarde o usa /ayuda para soporte.", parse_mode='Markdown')

    except Exception as e:
        print(f"Error en /partidos: {e}")
        bot.reply_to(message, "‚ùå Error al cargar los partidos. Intenta m√°s tarde." + add_footer(), parse_mode='Markdown')


@bot.message_handler(commands=['ayuda'])
def send_help(message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üì± Soluci√≥n Celular (VPN)", callback_data="help_vpn"),
        InlineKeyboardButton("üíª Soluci√≥n PC/TV (DNS)", callback_data="help_dns"),
        InlineKeyboardButton("üåê Modo Inc√≥gnito", callback_data="help_incognito")
    )

    help_text = """üìñ *AYUDA R√ÅPIDA* üìñ

‚ùå *¬øNo puedes ver el partido?*
üëâ Prueba primero estas soluciones:

üì± *En celular* ‚Üí usar VPN (desbloquea los links)
üíª *En PC/TV* ‚Üí cambiar DNS (arregla pantalla negra)
‚öΩÔ∏è *Tambi√©n te recomendamos usar modo inc√≥gnito*

üìù *Nota:* Si ninguna opci√≥n te funciona, puede ser un fallo del proveedor del servidor. Espera un momento y vuelve a intentar.

üëá *Elige una opci√≥n:*"""
    full_message = help_text + add_footer()
    bot.send_message(message.chat.id, full_message, parse_mode='Markdown', reply_markup=keyboard)
    print("‚úÖ /ayuda enviado con inline keyboard")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data == "help_vpn":
        response = """üì± *SOLUCI√ìN CELULAR - VPN*

¬øProblema? ‚ùå Links bloqueados o no cargan

Soluci√≥n: Usar VPN para desbloquear

1. Descarga una app VPN gratis:
   üì≤ Turbo VPN (Android/iOS)
   üì≤ Windscribe 
   üì≤ Hotspot Shield
   üì≤ Cloudflare WARP (1.1.1.1)

2. Pasos a seguir:
   ‚Ä¢ Abre la app VPN
   ‚Ä¢ Toca "Conectar" o "Connect"
   ‚Ä¢ Elige cualquier pa√≠s
   ‚Ä¢ Listo ‚úÖ Ahora prueba el link

Nota: La VPN evita que tu compa√±√≠a de internet bloquee los partidos.

üí° Esta soluci√≥n es 100% efectiva. Si a√∫n as√≠ no te funciona, puede deberse a tu conexi√≥n a internet."""

    elif call.data == "help_dns":
        response = """üíª *SOLUCI√ìN PC/TV - DNS*

¬øProblema? ‚ùå Pantalla negra o "stream no disponible"

Soluci√≥n: Cambiar DNS para saltar restricciones

DNS Recomendados:
üîπ Google: 8.8.8.8 y 8.8.4.4
üîπ Cloudflare: 1.1.1.1 y 1.0.0.1

¬øC√≥mo cambiar DNS?

üì± En Android:
   Ajustes ‚Üí Redes ‚Üí DNS privado ‚Üí Ingresa: 1.1.1.1

üíª En Windows:
   Panel Control ‚Üí Red ‚Üí Adaptador ‚Üí Propiedades ‚Üí IPv4 ‚Üí Usar DNS

üì∫ En Smart TV:
   Configuraci√≥n ‚Üí Red ‚Üí DNS manual

üîÑ Reinicia el navegador despu√©s de cambiar DNS

üí° Esta soluci√≥n es 100% efectiva. Si a√∫n as√≠ no te funciona, puede deberse a tu conexi√≥n a internet."""

    elif call.data == "help_incognito":
        response = """üåê *MODO INC√ìGNITO*

¬øProblema? ‚ùå P√°gina carga mal o da error

Soluci√≥n: Probar en modo inc√≥gnito

Pasos r√°pidos:

üì± En Chrome/Edge:
   ‚Ä¢ Toca los 3 puntos ‚ãÆ
   ‚Ä¢ "Nueva pesta√±a inc√≥gnito"
   ‚Ä¢ O usa: Ctrl+Shift+N (PC)

üì± En Firefox:
   ‚Ä¢ Toca los 3 puntos ‚ãÆ  
   ‚Ä¢ "Nueva pesta√±a privada"
   ‚Ä¢ O usa: Ctrl+Shift+P (PC)

üì± En Safari:
   ‚Ä¢ Toca los cuadrados []
   ‚Ä¢ "Privado"
   ‚Ä¢ O usa: Cmd+Shift+N (Mac)

¬øPor qu√© funciona?
El modo inc√≥gnito evita problemas de cache, cookies y extensiones que pueden bloquear el stream.

üí° Esta soluci√≥n es 100% efectiva. Si a√∫n as√≠ no te funciona, puede deberse a tu conexi√≥n a internet."""

    full_response = response + add_footer()
    bot.send_message(call.message.chat.id, full_response, parse_mode='Markdown')
    bot.answer_callback_query(call.id)

# ========================
# BUSCADOR SUPER SIMPLE - SIN COMPLICACIONES
# ========================
def search_matches(message, search_term):
    try:
        partidos = PARTIDOS_JSON["partidos"]
        matches = []

        search_clean = search_term.strip().lower()
        print(f"üîç B√∫squeda simple: '{search_term}'")

        for partido in partidos:
            partido_text = partido['partido'].lower()
            
            # BUSQUEDA SIMPLE: Si la palabra aparece en cualquier parte del partido
            if search_clean in partido_text:
                matches.append(partido)

        if matches:
            result_text = f"üîç *Resultados para '{search_term}'*:\n\n"
            for i, match in enumerate(matches, 1):
                result_text += f"*{i}. {match['partido']}*\n"
                result_text += f"üîó {match['link']}\n\n"
            result_text += f"_üìä Encontr√© {len(matches)} partido(s)_"
            full_message = result_text + add_search_footer()
            bot.reply_to(message, full_message, parse_mode='Markdown')
            print(f"üîç B√∫squeda exitosa: '{search_term}' ‚Üí {len(matches)} resultados")
        else:
            result_text = f"‚ùå *No encontr√© '{search_term}' en la agenda de hoy*\n\n"
            result_text += "üí° *Sugerencias:*\n‚Ä¢ Escribe el nombre del equipo o liga\n‚Ä¢ Ejemplos: 'premier', 'sevilla', 'champions'\n‚Ä¢ Usa /partidos para ver toda la agenda"
            full_message = result_text + add_search_footer()
            bot.reply_to(message, full_message, parse_mode='Markdown')
            print(f"üîç B√∫squeda sin resultados: '{search_term}'")

    except Exception as e:
        print(f"‚ùå ERROR en b√∫squeda: {e}")
        error_message = "‚ùå Error temporal. Intenta de nuevo." + add_footer()
        bot.reply_to(message, error_message, parse_mode='Markdown')

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    text = message.text.strip().lower()
    if text in ["/start", "/partidos", "/ayuda", "/menu"]:
        return
    search_matches(message, text)

def run_bot():
    print("ü§ñ Bot iniciado en Render - 24/7 activo")
    while True:
        try:
            bot.polling(none_stop=True, timeout=30, skip_pending=True)
        except Exception as e:
            error_msg = str(e)
            print(f"‚ùå Error en polling: {error_msg}")
            if "409" in error_msg:
                print("üö® CONFLICTO: Otra instancia detectada")
                time.sleep(30)
            elif "Timed out" in error_msg or "Timeout" in error_msg:
                print("‚è∞ Timeout, reconectando...")
                time.sleep(5)
            else:
                print("üîß Error gen√©rico, reconectando en 10s...")
                time.sleep(10)

@app.route('/')
def home():
    return "‚úÖ Bot activo - Render 24/7"

if __name__ == "__main__":
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)
